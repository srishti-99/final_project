#!/usr/bin/python3

class ObjectDetection:

    def __init__(self, objects):
        """ Takes in an array of Objects (see defined class) """
        self.objects = objects
        self.bounding_boxes = {}

    def generate_boxes(self, buffer):
        """ Generates bounding box around each object based on specified buffer parameter. """

        for object in self.objects:
            x_coords = []
            y_coords = []

            for point in object.points:
                x_coords.append(point[0])
                y_coords.append(point[1])

            bottom_left = (min(x_coords)-buffer, min(y_coords)-buffer)
            top_left = (min(x_coords)-buffer, max(y_coords)+buffer)
            bottom_right = (max(x_coords)+buffer, min(y_coords)-buffer)
            top_right = (max(x_coords)+buffer, max(y_coords)+buffer)

            box = [bottom_left, top_left, bottom_right, top_right]
            key = object.id

            self.bounding_boxes[key] = box


    def check_contact(self, generated_point):
        """ Checks if point generated by RRT is sufficiently close to object
        to make contact. Returns a boolean value indicating status of contact.

        generated_point (tuple): (x, y)
        """
        x, y = generated_point[0], generated_point[1]

        contact = False

        for object_id in self.bounding_boxes:
            box = self.bounding_boxes[object_id] # Boxes are arrays containing 4 tuples: [bottom_left, top_left, bottom_right, top_right]

            if x >= box[0][0] and x <= box[2][0]:
                contact = True

            if y >= box[0][1] and y <= box[1][1]:
                contact = True

        return contact
